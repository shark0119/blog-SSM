<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hfxt.dao.IBlogcontentDao">
<!-- 新增的方法写在这里 -->
<!-- 发布博客 -->
<insert id="addBlogcontent" parameterType="com.hfxt.domain.vo.BlogcontentVo">
insert into blogcontent(BlogContentId,Title,Abstrac,Content,DraftContent,checkArticle)
 values(#{blogContentId},#{title},#{abstrac},#{content},#{draftContent},#{checkArticle})
</insert>

<!-- 查询最大ID的博客 -->
<select id="getMaxId" resultType="Integer">
select max(BlogContentId) from blogcontent
</select>
<!-- 根据blogid获取内容 -->
<select id="findContentById" resultType="BlogcontentVo" parameterType="Integer">
SELECT * FROM blog b,blogcontent bct WHERE 
bct.BlogContentId=b.BlogContentId AND b.blogId=#{blogId}
</select>

<!-- 根据ID删除博客内容 -->
<delete id="deleteBlogContent" parameterType="Integer" >
DELETE FROM blogcontent WHERE blogContentId=#{blogContentId}
</delete>

<!-- 根据ID修改博客内容 -->
<update id="updateBlogContent" parameterType="com.hfxt.domain.vo.BlogcontentVo">
UPDATE blogcontent SET title=#{title},Abstrac=#{abstrac},content=#{content},checkArticle=#{checkArticle} WHERE blogContentId=#{blogContentId}
</update>


<!-- 根据blogcontentid获取内容 -->
<select id="findContentByBctId" resultType="BlogcontentVo" parameterType="Integer">
SELECT * FROM blog b,blogcontent bct WHERE 
bct.BlogContentId=b.BlogContentId AND b.blogcontentId=#{blogcontentId}
</select>

<!-- //按标签名查找博客 -->
<select id="findBlogContentByLabelName" parameterType="String" resultType="BlogcontentVo">
SELECT * FROM blog b,blogcontent bct,bloglabel bll,label ll
WHERE b.BlogContentId=bct.BlogContentId AND b.BlogId=bll.BlogId AND
bll.LabelId=ll.LabelId AND ll.LabelName like CONCAT(CONCAT('%', #{labelName}), '%')
</select>

<!-- <resultMap type="com.hfxt.domain.vo.BlogcontentVo" id="BlogcontentVoResultMap">
<id column="BlogcontentId" property="blogContentId"/>
        <result column="title" property="title"/>
        <result column="abstract" property="abstrac"/>
        <result column="content" property="content"/>
</resultMap> -->
 
<!-- 保存非空列,返回受影响的行数 -->
	<insert id="saveSelective" useGeneratedKeys="true" keyProperty="Vo.id">
		Insert Into blogcontent 
		<trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="Vo.title != null">Title,</if>
            <if test="Vo.abstrac != null">Abstrac,</if>
            <if test="Vo.content != null">Content,</if>
           
		</trim>
		<trim prefix="Values (" suffix=")" suffixOverrides=",">
            <if test="Vo.title != null">#{Vo.title},</if>
            <if test="Vo.abstrac != null">#{Vo.abstrac},</if>
            <if test="Vo.content != null">#{Vo.content},</if>
            
		</trim>
	</insert>
    
    <!-- 根据主键删除-->
	<delete id="delete">
		Delete From blogcontent
		Where id = #{id}
	</delete>
    
    <!-- 删除所有记录,返回受影响的行数 -->
	<delete id="deleteAll">
		Delete From blogcontent
	</delete>
    
    <!-- 更新非空列,返回受影响的行数 -->
	<update id="updateSelective">
		Update blogcontent
		<trim prefix="Set" suffixOverrides=",">
            <if test="Vo.title != null">Title = #{Vo.title},</if>
            <if test="Vo.abstrac != null">Abstrac = #{Vo.abstrac},</if>
            <if test="Vo.content != null">Content = #{Vo.content},</if>
		</trim>
		Where blogcontent.id = #{Vo.id}
	</update>
    
    <resultMap type="BlogcontentVo" id="RM_Default">
        <id column="Blogcontent_id" property="id"/>
        <result column="Blogcontent_title" property="title"/>
        <result column="Blogcontent_abstrac" property="abstrac"/>
        <result column="Blogcontent_content" property="content"/>
	</resultMap>
    
     <!-- ResultMap -->
	<resultMap type="BlogcontentVo" id="RM_getVo_Auto">
		<discriminator javaType="int" column="_chooseRM">
			<case value="0" resultMap="RM_Default" /><!-- Auto -->
		</discriminator>
	</resultMap>
    
    <!-- 根据主键查询一条记录,通过'__chooseRM'控制返回的列 -->
	<select id="getVo_Auto" resultMap="RM_getVo_Auto">
		Select
		<include refid="Sql_SelectColumns" />
		#{chooseRM} As _chooseRM
		From	blogcontent	As	blogcontent
		Where
		blogcontent.id = #{id}
	</select>
    
    <!-- 传入id,判断是否存在该记录 -->
	<select id="isExist_Auto" resultType="boolean">
		Select Count(id) > 0
		From	blogcontent	As	blogcontent
		Where
		blogcontent.id = #{id}
	</select>
    
    <!-- 查询记录数量 -->
	<select id="queryCount_Auto" resultType="Long">
		Select Count(blogcontent.id)
		From	blogcontent	As	blogcontent
        <trim prefix="Where" prefixOverrides="And | Or">
			<include refid="Sql_Where"/>
		</trim>
	</select>
    
    <resultMap type="BlogcontentVo" id="RM_queryVos_Auto">
        <discriminator javaType="int" column="_chooseRM">
			<case value="0" resultMap="RM_Default" /><!-- Auto -->
		</discriminator>
	</resultMap>
    
    <!-- 查询记录集合,通过'__chooseRM'控制返回的列 -->
	<select id="queryVos_Auto" resultMap="RM_queryVos_Auto">
		Select
		<include refid="Sql_SelectColumns"/>
		#{BlogcontentSearch.chooseRM} As _chooseRM
		From	blogcontent	As	blogcontent
        <trim prefix="Where" prefixOverrides="And | Or">
			<include refid="Sql_Where"/>
		</trim>
		<include refid="Sql_Order"/>
		Limit #{BlogcontentSearch.offset},#{BlogcontentSearch.limit}
	</select>
    

    <resultMap type="BlogcontentVo" id="RM_getVo_AdminView">
		<!-- <discriminator javaType="int" column="_chooseRM"> -->
        <id column="Blogcontent_id" property="id"/>
        <result column="Blogcontent_title" property="title"/>
        <result column="Blogcontent_abstrac" property="abstrac"/>
        <result column="Blogcontent_content" property="content"/>
		<!-- </discriminator> -->
	</resultMap>
    
    <!-- 根据主键查询一条记录,专供AdminView调用 -->
	<select id="getVo_AdminView" resultMap="RM_getVo_AdminView">
		Select
		<include refid="Sql_SelectColumns" />
		#{chooseRM} As _chooseRM
		From	blogcontent	As	blogcontent
		Where
		blogcontent.id = #{id}
	</select>
    
    <resultMap type="BlogcontentVo" id="RM_getVo_preAdminEdit">
		<!-- <discriminator javaType="int" column="_chooseRM"> -->
        <id column="Blogcontent_id" property="id"/>
        <result column="Blogcontent_title" property="title"/>
        <result column="Blogcontent_abstrac" property="abstrac"/>
        <result column="Blogcontent_content" property="content"/>
		<!-- </discriminator> -->
	</resultMap>
    
    <!-- 根据主键查询一条记录,专供preAdminEdit调用 -->
	<select id="getVo_preAdminEdit" resultMap="RM_getVo_preAdminEdit">
		Select
		<include refid="Sql_SelectColumns" />
		#{chooseRM} As _chooseRM
		From	blogcontent	As	blogcontent
		Where
		blogcontent.id = #{id}
	</select>
    
    <resultMap type="BlogcontentVo" id="RM_getVo_AdminEdit">
		<!-- <discriminator javaType="int" column="_chooseRM"> -->
        <id column="Blogcontent_id" property="id"/>
        <result column="Blogcontent_title" property="title"/>
        <result column="Blogcontent_abstrac" property="abstrac"/>
        <result column="Blogcontent_content" property="content"/>
		<!-- </discriminator> -->
	</resultMap>
    
    <!-- 根据主键查询一条记录,专供AdminEdit调用 -->
	<select id="getVo_AdminEdit" resultMap="RM_getVo_AdminEdit">
		Select
		<include refid="Sql_SelectColumns" />
		#{chooseRM} As _chooseRM
		From	blogcontent	As	blogcontent
		Where
		blogcontent.id = #{id}
	</select>
    
    <resultMap type="BlogcontentVo" id="RM_queryVos_AdminList">
		<!-- <discriminator javaType="int" column="_chooseRM"> -->
        <id column="Blogcontent_id" property="id"/>
        <result column="Blogcontent_title" property="title"/>
        <result column="Blogcontent_abstrac" property="abstrac"/>
        <result column="Blogcontent_content" property="content"/>
		<!-- </discriminator> -->
	</resultMap>
    
    <sql id="Sql_SelectColumns">
        blogcontent.BlogContentId As Blogcontent_blogContentId,
        blogcontent.Title As Blogcontent_title,
        blogcontent.Abstrac As Blogcontent_abstrac,
        blogcontent.Content As Blogcontent_content,
	</sql>
    
    <sql id="Sql_Order">
		<trim prefix="Order By ">
    		<choose>
                <when test="BlogcontentSearch.sort != null">
                    Blogcontent_${BlogcontentSearch.sort} 
                    <if test="BlogcontentSearch.order != null">
                        ${BlogcontentSearch.order}
                    </if>
                </when>
                <otherwise>
                    Blogcontent_id Desc
                </otherwise>
            </choose>
		</trim>
	</sql>
    
    <sql id="Sql_Where">
        <if test="BlogcontentSearch.eqBlogContentId != null">
			<![CDATA[ And blogcontent.BlogContentId = #{BlogcontentSearch.eqBlogContentId} ]]>
		</if>
		<if test="BlogcontentSearch.neBlogContentId != null">
			<![CDATA[ And blogcontent.BlogContentId != #{BlogcontentSearch.neBlogContentId} ]]>
		</if>
        <if test="BlogcontentSearch.eqTitle != null">
			<![CDATA[ And blogcontent.Title = #{BlogcontentSearch.eqTitle} ]]>
		</if>
		<if test="BlogcontentSearch.lkTitle != null">
			<![CDATA[ And blogcontent.Title Like '%${BlogcontentSearch.lkTitle}%' ]]>
		</if>
        <if test="BlogcontentSearch.eqAbstrac != null">
			<![CDATA[ And blogcontent.Abstrac = #{BlogcontentSearch.eqAbstrac} ]]>
		</if>
		<if test="BlogcontentSearch.lkAbstrac != null">
			<![CDATA[ And blogcontent.Abstrac Like '%${BlogcontentSearch.lkAbstrac}%' ]]>
		</if>
        <if test="BlogcontentSearch.eqContent != null">
			<![CDATA[ And blogcontent.Content = #{BlogcontentSearch.eqContent} ]]>
		</if>
		<if test="BlogcontentSearch.lkContent != null">
			<![CDATA[ And blogcontent.Content Like '%${BlogcontentSearch.lkContent}%' ]]>
		</if>
    </sql>
</mapper>


